{"version":3,"file":"chartjs-plugin-zoom.esm.js","sources":["../src/utils.ts","../src/state.ts","../src/scale.types.ts","../src/core.ts","../src/handlers.ts","../src/hammer.ts","../src/defaults.ts","../src/plugin.ts"],"sourcesContent":["import type { Chart, Point, Scale } from 'chart.js'\nimport type { DragOptions, ModeOption, ModifierKey, PanOptions } from './options'\n\nconst eventKey = (key: ModifierKey): 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey' => `${key}Key`\n\nexport const getModifierKey = (opts?: DragOptions | PanOptions): ModifierKey | undefined =>\n  opts?.enabled && opts.modifierKey ? opts.modifierKey : undefined\nexport const keyPressed = (key: ModifierKey | undefined, event: TouchEvent | MouseEvent | PointerEvent) =>\n  key && event[eventKey(key)]\nexport const keyNotPressed = (key: ModifierKey | undefined, event: TouchEvent | MouseEvent | PointerEvent) =>\n  key && !event[eventKey(key)]\n\nexport function directionEnabled(mode: ModeOption | undefined, dir: 'x' | 'y', chart: Chart): boolean {\n  if (mode === undefined) {\n    return true\n  } else if (typeof mode === 'string') {\n    return mode.indexOf(dir) !== -1\n  } else if (typeof mode === 'function') {\n    return mode({ chart }).indexOf(dir) !== -1\n  }\n\n  return false\n}\n\nfunction directionsEnabled(mode: ModeOption | undefined, chart: Chart) {\n  if (typeof mode === 'function') {\n    mode = mode({ chart })\n  }\n  if (typeof mode === 'string') {\n    return { x: mode.indexOf('x') !== -1, y: mode.indexOf('y') !== -1 }\n  }\n\n  return { x: false, y: false }\n}\n\nexport function debounce(fn: () => void, delay: number | undefined) {\n  let timeout: number | NodeJS.Timeout\n  return function () {\n    clearTimeout(timeout)\n    timeout = setTimeout(fn, delay)\n    return delay\n  }\n}\n\nfunction getScaleUnderPoint({ x, y }: Point, chart: Chart): Scale | null {\n  const scales = chart.scales\n  const scaleIds = Object.keys(scales)\n  for (let i = 0; i < scaleIds.length; i++) {\n    const scale = scales[scaleIds[i]]\n    if (y >= scale.top && y <= scale.bottom && x >= scale.left && x <= scale.right) {\n      return scale\n    }\n  }\n  return null\n}\n\ntype EnabledDirections = { x: boolean; y: boolean }\n\nconst convertOverScaleMode = (\n  chart: Chart,\n  overScaleMode: ModeOption | undefined,\n  scaleEnabled: EnabledDirections,\n  enabled: EnabledDirections\n) => {\n  if (!overScaleMode) {\n    return\n  }\n\n  const overScaleEnabled = directionsEnabled(overScaleMode, chart)\n  for (const axis of ['x', 'y'] as const) {\n    if (overScaleEnabled[axis]) {\n      scaleEnabled[axis] = enabled[axis]\n      enabled[axis] = false\n    }\n  }\n}\n\nconst getEnabledScales = (chart: Chart, enabled: EnabledDirections): Scale[] => {\n  const enabledScales: Scale[] = []\n\n  for (const scaleItem of Object.values(chart.scales)) {\n    if (enabled[scaleItem.axis as 'x' | 'y']) {\n      enabledScales.push(scaleItem)\n    }\n  }\n\n  return enabledScales || Object.values(chart.scales)\n}\n\n/**\n * Evaluate the chart's mode, scaleMode, and overScaleMode properties to\n * determine which axes are eligible for scaling.\n * options.overScaleMode can be a function if user want zoom only one scale of many for example.\n */\nexport function getEnabledScalesByPoint(options: PanOptions | undefined, point: Point, chart: Chart): Scale[] {\n  const { mode = 'xy', scaleMode, overScaleMode } = options || {}\n  const scale = getScaleUnderPoint(point, chart)\n\n  const enabled = directionsEnabled(mode, chart)\n  const scaleEnabled = directionsEnabled(scaleMode, chart)\n\n  // Convert deprecated overScaleEnabled to new scaleEnabled.\n  convertOverScaleMode(chart, overScaleMode, scaleEnabled, enabled)\n\n  if (scale && scaleEnabled[scale.axis as 'x' | 'y']) {\n    return [scale]\n  }\n\n  return getEnabledScales(chart, enabled)\n}\n","import { Chart, Scale, type Point } from 'chart.js'\nimport type { ZoomPluginOptions } from './options'\n\nexport type ScaleRange = { min: number; max: number }\nexport type OriginalLimits = { min: { scale?: number; options?: unknown }; max: { scale?: number; options?: unknown } }\nexport type OriginalScaleLimits = Record<string, OriginalLimits>\nexport type UpdatedScaleLimits = Record<string, ScaleRange>\n\nexport type HandlerFunctions = {\n  click: (chart: Chart, event: MouseEvent, options: ZoomPluginOptions) => void\n  keydown: (chart: Chart, event: KeyboardEvent) => void\n  mousedown: (chart: Chart, event: MouseEvent, options: ZoomPluginOptions) => void\n  mousemove: (chart: Chart, event: MouseEvent, options: ZoomPluginOptions) => void\n  mouseup: (chart: Chart, event: MouseEvent, options: ZoomPluginOptions) => void\n  onZoomComplete: ({ chart }: { chart: Chart }) => void\n  wheel: (chart: Chart, event: WheelEvent) => void\n}\nexport type HandlerName = keyof HandlerFunctions\nexport type HandlerFunction = HandlerFunctions[HandlerName]\nexport type Handler = EventListener\nexport type Handlers = Partial<Record<HandlerName, Handler>>\n\nexport type HandlerTarget = Partial<Record<HandlerName, HTMLCanvasElement | Document>>\n\nexport interface State {\n  originalScaleLimits: OriginalScaleLimits\n  updatedScaleLimits: UpdatedScaleLimits\n  handlers: Handlers\n  targets: HandlerTarget\n  panDelta: Record<string, number>\n  dragging: boolean\n  panning: boolean\n  options: ZoomPluginOptions\n  dragStart?: MouseEvent\n  dragEnd?: MouseEvent\n  filterNextClick?: boolean\n  scale?: number | null\n  delta?: Point | null\n  panScales?: Scale[]\n}\n\nconst chartStates = new WeakMap<Chart, State>()\n\nexport function getState(chart: Chart): State {\n  let state = chartStates.get(chart)\n  if (!state) {\n    state = {\n      originalScaleLimits: {},\n      updatedScaleLimits: {},\n      handlers: {},\n      options: {},\n      targets: {},\n      panDelta: {},\n      dragging: false,\n      panning: false,\n    }\n    chartStates.set(chart, state)\n  }\n  return state\n}\n\nexport function removeState(chart: Chart) {\n  chartStates.delete(chart)\n}\n","import { almostEquals, isNullOrUndef, isNumber, valueOrDefault } from 'chart.js/helpers'\nimport { getState, type ScaleRange, type State } from './state'\nimport type { Point, Scale, TimeScale, TimeUnit } from 'chart.js'\nimport type { LimitOptions, ScaleLimits } from './options'\n\nexport type ZoomFunction = (scale: Scale, zoom: number, center: Point, limits: LimitOptions) => boolean\nexport type ZoomRectFunction = (scale: Scale, from: number, to: number, limits: LimitOptions) => boolean\nexport type PanFunction = (scale: Scale, delta: number, limits: LimitOptions) => boolean\n\nconst isTimeScale = (scale: Scale): scale is TimeScale => scale.type === 'time'\n\nconst isNotNumber = (value?: number): value is undefined => value === undefined || isNaN(value)\n\nexport function zoomDelta(\n  val: number | undefined,\n  min: number | undefined,\n  range: number,\n  newRange: number\n): ScaleRange {\n  const minPercent = range && isNumber(val) && isNumber(min) ? Math.max(0, Math.min(1, (val - min) / range)) : 0\n  const maxPercent = 1 - minPercent\n\n  return {\n    min: newRange * minPercent,\n    max: newRange * maxPercent,\n  }\n}\n\nfunction getValueAtPoint(scale: Scale, point: Point): number | undefined {\n  const pixel = scale.isHorizontal() ? point.x : point.y\n\n  return scale.getValueForPixel(pixel)\n}\n\nfunction linearZoomDelta(scale: Scale, zoom: number, center: Point): ScaleRange {\n  const range = scale.max - scale.min\n  const newRange = range * (zoom - 1)\n  const centerValue = getValueAtPoint(scale, center)\n\n  return zoomDelta(centerValue, scale.min, range, newRange)\n}\n\nfunction logarithmicZoomRange(scale: Scale, zoom: number, center: Point) {\n  const centerValue = getValueAtPoint(scale, center)\n\n  // Return the original range, if value could not be determined.\n  if (centerValue === undefined) {\n    return { min: scale.min, max: scale.max }\n  }\n\n  const logMin = Math.log10(scale.min)\n  const logMax = Math.log10(scale.max)\n  const logCenter = Math.log10(centerValue)\n  const logRange = logMax - logMin\n  const newLogRange = logRange * (zoom - 1)\n  const delta = zoomDelta(logCenter, logMin, logRange, newLogRange)\n\n  return {\n    min: Math.pow(10, logMin + delta.min),\n    max: Math.pow(10, logMax - delta.max),\n  }\n}\n\nfunction getScaleLimits(scale: Scale, limits?: LimitOptions): ScaleLimits {\n  return limits?.[scale.id] || limits?.[scale.axis] || {}\n}\n\nfunction getLimit(state: State, scale: Scale, scaleLimits: ScaleLimits, prop: 'min' | 'max', fallback: number): number {\n  let limit = scaleLimits[prop]\n  if (limit === 'original') {\n    const original = state.originalScaleLimits[scale.id][prop]\n    if (isNumber(original.options)) {\n      return original.options\n    }\n\n    if (!isNullOrUndef(original.options)) {\n      const parsed = scale.parse(original.options)\n      if (isNumber(parsed)) {\n        return parsed\n      }\n    }\n\n    limit = original.scale\n  }\n  return valueOrDefault(limit, fallback)\n}\n\nfunction linearRange(scale: Scale, pixel0: number, pixel1: number): ScaleRange {\n  const v0 = scale.getValueForPixel(pixel0) ?? scale.min\n  const v1 = scale.getValueForPixel(pixel1) ?? scale.max\n  return {\n    min: Math.min(v0, v1),\n    max: Math.max(v0, v1),\n  }\n}\n\nfunction fixRange(\n  range: number,\n  { min, max, minLimit, maxLimit }: { min: number; max: number; minLimit: number; maxLimit: number },\n  state: State,\n  scale: Scale\n) {\n  const offset = (range - max + min) / 2\n  min -= offset\n  max += offset\n\n  // In case the values are really close to the original values, use the original values.\n  const origLimits: ScaleLimits = { min: 'original', max: 'original' }\n  const origMin = getLimit(state, scale, origLimits, 'min', -Infinity)\n  const origMax = getLimit(state, scale, origLimits, 'max', Infinity)\n\n  const epsilon = range / 1e6\n  if (almostEquals(min, origMin, epsilon)) {\n    min = origMin\n  }\n  if (almostEquals(max, origMax, epsilon)) {\n    max = origMax\n  }\n\n  // Apply limits\n  if (min < minLimit) {\n    min = minLimit\n    max = Math.min(minLimit + range, maxLimit)\n  } else if (max > maxLimit) {\n    max = maxLimit\n    min = Math.max(maxLimit - range, minLimit)\n  }\n\n  return { min, max }\n}\n\nexport function updateRange(\n  scale: Scale,\n  { min, max }: ScaleRange,\n  limits?: LimitOptions,\n  zoom: boolean | 'pan' = false\n): boolean {\n  const state = getState(scale.chart)\n  const { options: scaleOpts } = scale\n\n  const scaleLimits = getScaleLimits(scale, limits)\n  const { minRange = 0 } = scaleLimits\n  const minLimit = getLimit(state, scale, scaleLimits, 'min', -Infinity)\n  const maxLimit = getLimit(state, scale, scaleLimits, 'max', Infinity)\n\n  if (zoom === 'pan' && (min < minLimit || max > maxLimit)) {\n    // At limit: No change but return true to indicate no need to store the delta.\n    return true\n  }\n\n  const scaleRange = scale.max - scale.min\n  const range = zoom ? Math.max(max - min, minRange) : scaleRange\n\n  if (zoom && range === minRange && scaleRange <= minRange) {\n    // At range limit: No change but return true to indicate no need to store the delta.\n    return true\n  }\n\n  const newRange = fixRange(range, { min, max, minLimit, maxLimit }, state, scale)\n\n  scaleOpts.min = newRange.min\n  scaleOpts.max = newRange.max\n\n  state.updatedScaleLimits[scale.id] = newRange\n\n  // return true if the scale range is changed\n  return scale.parse(newRange.min) !== scale.min || scale.parse(newRange.max) !== scale.max\n}\n\nfunction zoomNumericalScale(scale: Scale, zoom: number, center: Point, limits: LimitOptions) {\n  const delta = linearZoomDelta(scale, zoom, center)\n  const newRange = { min: scale.min + delta.min, max: scale.max - delta.max }\n  return updateRange(scale, newRange, limits, true)\n}\n\nfunction zoomLogarithmicScale(scale: Scale, zoom: number, center: Point, limits: LimitOptions) {\n  const newRange = logarithmicZoomRange(scale, zoom, center)\n  return updateRange(scale, newRange, limits, true)\n}\n\nfunction zoomRectNumericalScale(scale: Scale, from: number, to: number, limits: LimitOptions) {\n  return updateRange(scale, linearRange(scale, from, to), limits, true)\n}\n\nconst integerChange = (v: number) =>\n  v === 0 || isNaN(v) ? 0 : v < 0 ? Math.min(Math.round(v), -1) : Math.max(Math.round(v), 1)\n\nfunction existCategoryFromMaxZoom(scale: Scale) {\n  const labels = scale.getLabels()\n  const maxIndex = labels.length - 1\n\n  if (scale.min > 0) {\n    scale.min -= 1\n  }\n  if (scale.max < maxIndex) {\n    scale.max += 1\n  }\n}\n\nfunction zoomCategoryScale(scale: Scale, zoom: number, center: Point, limits: LimitOptions) {\n  const delta = linearZoomDelta(scale, zoom, center)\n  if (scale.min === scale.max && zoom < 1) {\n    existCategoryFromMaxZoom(scale)\n  }\n  const newRange = { min: scale.min + integerChange(delta.min), max: scale.max - integerChange(delta.max) }\n\n  return updateRange(scale, newRange, limits, true)\n}\n\nfunction scaleLength(scale: Scale) {\n  return scale.isHorizontal() ? scale.width : scale.height\n}\n\nfunction panCategoryScale(scale: Scale, delta: number, limits: LimitOptions) {\n  const labels = scale.getLabels()\n  const lastLabelIndex = labels.length - 1\n  let { min, max } = scale\n  // The visible range. Ticks can be skipped, and thus not reliable.\n  const range = Math.max(max - min, 1)\n  // How many pixels of delta is required before making a step. stepSize, but limited to max 1/10 of the scale length.\n  const stepDelta = Math.round(scaleLength(scale) / Math.max(range, 10))\n  const stepSize = Math.round(Math.abs(delta / stepDelta))\n  let applied\n  if (delta < -stepDelta) {\n    max = Math.min(max + stepSize, lastLabelIndex)\n    min = range === 1 ? max : max - range\n    applied = max === lastLabelIndex\n  } else if (delta > stepDelta) {\n    min = Math.max(0, min - stepSize)\n    max = range === 1 ? min : min + range\n    applied = min === 0\n  }\n\n  return updateRange(scale, { min, max }, limits) || Boolean(applied)\n}\n\nconst OFFSETS: Record<TimeUnit, number> = {\n  millisecond: 0,\n  second: 500, // 500 ms\n  minute: 30 * 1000, // 30 s\n  hour: 30 * 60 * 1000, // 30 m\n  day: 12 * 60 * 60 * 1000, // 12 h\n  week: 3.5 * 24 * 60 * 60 * 1000, // 3.5 d\n  month: 15 * 24 * 60 * 60 * 1000, // 15 d\n  quarter: 60 * 24 * 60 * 60 * 1000, // 60 d\n  year: 182 * 24 * 60 * 60 * 1000, // 182 d\n}\n\nfunction panNumericalScale(scale: Scale, delta: number, limits: LimitOptions, pan = false) {\n  const { min: prevStart, max: prevEnd } = scale\n  let offset = 0\n  if (isTimeScale(scale)) {\n    const round = scale.options.time?.round\n    offset = round ? OFFSETS[round] : 0\n  }\n  const newMin = scale.getValueForPixel(scale.getPixelForValue(prevStart + offset) - delta)\n  const newMax = scale.getValueForPixel(scale.getPixelForValue(prevEnd + offset) - delta)\n  if (isNotNumber(newMin) || isNotNumber(newMax)) {\n    // NaN can happen for 0-dimension scales (either because they were configured\n    // with min === max or because the chart has 0 plottable area).\n    return true\n  }\n  return updateRange(scale, { min: newMin, max: newMax }, limits, pan ? 'pan' : false)\n}\n\nfunction panNonLinearScale(scale: Scale, delta: number, limits: LimitOptions) {\n  return panNumericalScale(scale, delta, limits, true)\n}\n\nexport const zoomFunctions: Record<string, ZoomFunction> = {\n  category: zoomCategoryScale,\n  default: zoomNumericalScale,\n  logarithmic: zoomLogarithmicScale,\n}\n\nexport const zoomRectFunctions: Record<string, ZoomRectFunction> = {\n  default: zoomRectNumericalScale,\n}\n\nexport const panFunctions: Record<string, PanFunction> = {\n  category: panCategoryScale,\n  default: panNumericalScale,\n  logarithmic: panNonLinearScale,\n  timeseries: panNonLinearScale,\n}\n","import { isNumber, sign } from 'chart.js/helpers'\nimport { panFunctions, updateRange, zoomFunctions, zoomRectFunctions } from './scale.types.js'\nimport { getState, type OriginalScaleLimits, type ScaleRange, type State, type UpdatedScaleLimits } from './state.js'\nimport { directionEnabled, getEnabledScalesByPoint } from './utils.js'\nimport type { Chart, Point, Scale, UpdateMode } from 'chart.js'\nimport type { LimitOptions, ZoomTrigger } from './options.js'\nimport type { ZoomAmount } from './types.js'\n\nfunction shouldUpdateScaleLimits(\n  scale: Scale,\n  originalScaleLimits: OriginalScaleLimits,\n  updatedScaleLimits: UpdatedScaleLimits\n) {\n  const {\n    id,\n    options: { min, max },\n  } = scale\n  if (!originalScaleLimits[id] || !updatedScaleLimits[id]) {\n    return true\n  }\n  const previous = updatedScaleLimits[id]\n  return previous.min !== min || previous.max !== max\n}\n\nfunction removeMissingScales(limits: OriginalScaleLimits | UpdatedScaleLimits, scales: Record<string, Scale>) {\n  for (const key of Object.keys(limits)) {\n    if (!scales[key]) {\n      delete limits[key]\n    }\n  }\n}\n\nfunction storeOriginalScaleLimits(chart: Chart, state: State) {\n  const { scales } = chart\n  const { originalScaleLimits, updatedScaleLimits } = state\n\n  for (const scale of Object.values(scales)) {\n    if (shouldUpdateScaleLimits(scale, originalScaleLimits, updatedScaleLimits)) {\n      originalScaleLimits[scale.id] = {\n        min: { scale: scale.min, options: scale.options.min },\n        max: { scale: scale.max, options: scale.options.max },\n      }\n    }\n  }\n\n  removeMissingScales(originalScaleLimits, scales)\n  removeMissingScales(updatedScaleLimits, scales)\n  return originalScaleLimits\n}\n\nfunction doZoom(scale: Scale, amount: number, center: Point, limits: LimitOptions) {\n  const fn = zoomFunctions[scale.type] || zoomFunctions.default\n  fn?.(scale, amount, center, limits)\n}\n\nfunction doZoomRect(scale: Scale, from: number, to: number, limits: LimitOptions) {\n  const fn = zoomRectFunctions[scale.type] || zoomRectFunctions.default\n  fn?.(scale, from, to, limits)\n}\n\nfunction getCenter(chart: Chart) {\n  const ca = chart.chartArea\n  return {\n    x: (ca.left + ca.right) / 2,\n    y: (ca.top + ca.bottom) / 2,\n  }\n}\n\nexport function zoom(chart: Chart, amount: ZoomAmount, transition: UpdateMode = 'none', trigger: ZoomTrigger = 'api') {\n  const { x = 1, y = 1, focalPoint = getCenter(chart) } = typeof amount === 'number' ? { x: amount, y: amount } : amount\n  const state = getState(chart)\n  const {\n    options: { limits = {}, zoom: zoomOptions },\n  } = state\n\n  storeOriginalScaleLimits(chart, state)\n\n  const xEnabled = x !== 1\n  const yEnabled = y !== 1\n  const enabledScales = getEnabledScalesByPoint(zoomOptions, focalPoint, chart)\n\n  for (const scale of enabledScales) {\n    if (scale.isHorizontal() && xEnabled) {\n      doZoom(scale, x, focalPoint, limits)\n    } else if (!scale.isHorizontal() && yEnabled) {\n      doZoom(scale, y, focalPoint, limits)\n    }\n  }\n\n  chart.update(transition)\n\n  zoomOptions?.onZoom?.({ chart, trigger })\n}\n\nexport function zoomRect(\n  chart: Chart,\n  p0: Point,\n  p1: Point,\n  transition: UpdateMode = 'none',\n  trigger: ZoomTrigger = 'api'\n) {\n  const state = getState(chart)\n  const {\n    options: { limits = {}, zoom: zoomOptions = {} },\n  } = state\n  const { mode = 'xy' } = zoomOptions\n\n  storeOriginalScaleLimits(chart, state)\n  const xEnabled = directionEnabled(mode, 'x', chart)\n  const yEnabled = directionEnabled(mode, 'y', chart)\n\n  for (const scale of Object.values(chart.scales)) {\n    if (scale.isHorizontal() && xEnabled) {\n      doZoomRect(scale, p0.x, p1.x, limits)\n    } else if (!scale.isHorizontal() && yEnabled) {\n      doZoomRect(scale, p0.y, p1.y, limits)\n    }\n  }\n\n  chart.update(transition)\n\n  zoomOptions.onZoom?.({ chart, trigger })\n}\n\nexport function zoomScale(\n  chart: Chart,\n  scaleId: string,\n  range: ScaleRange,\n  transition: UpdateMode = 'none',\n  trigger: ZoomTrigger = 'api'\n) {\n  const state = getState(chart)\n  storeOriginalScaleLimits(chart, state)\n  const scale = chart.scales[scaleId]\n  updateRange(scale, range, undefined, true)\n  chart.update(transition)\n\n  state.options.zoom?.onZoom?.({ chart, trigger })\n}\n\nexport function resetZoom(chart: Chart, transition: UpdateMode = 'default') {\n  const state = getState(chart)\n  const originalScaleLimits = storeOriginalScaleLimits(chart, state)\n\n  for (const scale of Object.values(chart.scales)) {\n    const scaleOptions = scale.options\n    if (originalScaleLimits[scale.id]) {\n      scaleOptions.min = originalScaleLimits[scale.id].min.options\n      scaleOptions.max = originalScaleLimits[scale.id].max.options\n    } else {\n      delete scaleOptions.min\n      delete scaleOptions.max\n    }\n    delete state.updatedScaleLimits[scale.id]\n  }\n  chart.update(transition)\n\n  state.options.zoom?.onZoomComplete?.({ chart })\n}\n\nfunction getOriginalRange(state: State, scaleId: string): number | undefined {\n  const original = state.originalScaleLimits[scaleId]\n  if (!original) {\n    return undefined\n  }\n  const { min, max } = original\n  if (isNumber(max.options) && isNumber(min.options)) {\n    return max.options - min.options\n  }\n  if (isNumber(max.scale) && isNumber(min.scale)) {\n    return max.scale - min.scale\n  }\n  return undefined\n}\n\nexport function getZoomLevel(chart: Chart) {\n  const state = getState(chart)\n  let min = 1\n  let max = 1\n  for (const scale of Object.values(chart.scales)) {\n    const origRange = getOriginalRange(state, scale.id)\n    if (origRange) {\n      const level = Math.round((origRange / (scale.max - scale.min)) * 100) / 100\n      min = Math.min(min, level)\n      max = Math.max(max, level)\n    }\n  }\n  return min < 1 ? min : max\n}\n\nfunction panScale(scale: Scale, delta: number, limits: LimitOptions, state: State) {\n  const { panDelta } = state\n  // Add possible cumulative delta from previous pan attempts where scale did not change\n  const storedDelta = panDelta[scale.id] || 0\n  if (sign(storedDelta) === sign(delta)) {\n    delta += storedDelta\n  }\n  const fn = panFunctions[scale.type] || panFunctions.default\n  if (fn?.(scale, delta, limits)) {\n    // The scale changed, reset cumulative delta\n    panDelta[scale.id] = 0\n  } else {\n    // The scale did not change, store cumulative delta\n    panDelta[scale.id] = delta\n  }\n}\n\ntype PanAmount = number | Partial<Point>\n\nexport function pan(chart: Chart, delta: PanAmount, enabledScales?: Scale[], transition: UpdateMode = 'none') {\n  const { x = 0, y = 0 } = typeof delta === 'number' ? { x: delta, y: delta } : delta\n  const state = getState(chart)\n  const {\n    options: { pan: panOptions, limits = {} },\n  } = state\n  const { onPan } = panOptions || {}\n\n  storeOriginalScaleLimits(chart, state)\n\n  const xEnabled = x !== 0\n  const yEnabled = y !== 0\n\n  const scales = enabledScales || Object.values(chart.scales)\n\n  for (const scale of scales) {\n    if (scale.isHorizontal() && xEnabled) {\n      panScale(scale, x, limits, state)\n    } else if (!scale.isHorizontal() && yEnabled) {\n      panScale(scale, y, limits, state)\n    }\n  }\n\n  chart.update(transition)\n\n  onPan?.({ chart })\n}\n\nexport function getInitialScaleBounds(chart: Chart) {\n  const state = getState(chart)\n  storeOriginalScaleLimits(chart, state)\n  const scaleBounds: Record<string, { min?: number; max?: number }> = {}\n  for (const scaleId of Object.keys(chart.scales)) {\n    const { min, max } = state.originalScaleLimits[scaleId] || { min: {}, max: {} }\n    scaleBounds[scaleId] = { min: min.scale, max: max.scale }\n  }\n\n  return scaleBounds\n}\n\nexport function getZoomedScaleBounds(chart: Chart) {\n  const state = getState(chart)\n  const scaleBounds: Record<string, { min?: number; max?: number }> = {}\n  for (const scaleId of Object.keys(chart.scales)) {\n    scaleBounds[scaleId] = state.updatedScaleLimits[scaleId]\n  }\n\n  return scaleBounds\n}\n\nexport function isZoomedOrPanned(chart: Chart) {\n  const scaleBounds = getInitialScaleBounds(chart)\n  for (const scaleId of Object.keys(chart.scales)) {\n    const { min: originalMin, max: originalMax } = scaleBounds[scaleId]\n\n    if (originalMin !== undefined && chart.scales[scaleId].min !== originalMin) {\n      return true\n    }\n\n    if (originalMax !== undefined && chart.scales[scaleId].max !== originalMax) {\n      return true\n    }\n  }\n\n  return false\n}\n\nexport function isZoomingOrPanningState(state: State) {\n  return state.panning || state.dragging\n}\n\nexport function isZoomingOrPanning(chart: Chart) {\n  const state = getState(chart)\n  // From the perspective of outside callers, zooming and panning are still\n  // active if we haven't yet cleared the next click.\n  return !!(isZoomingOrPanningState(state) || state.filterNextClick)\n}\n","import { directionEnabled, debounce, keyNotPressed, getModifierKey, keyPressed } from './utils'\nimport { zoom, zoomRect } from './core'\nimport { getRelativePosition, _isPointInArea } from 'chart.js/helpers'\nimport { getState, type HandlerFunctions, type HandlerName } from './state'\nimport type { Chart, ChartArea, Point } from 'chart.js'\nimport type { ModeOption, ZoomOptions, ZoomPluginOptions } from './options'\n\nconst clamp = (x: number, from: number, to: number): number => Math.min(to, Math.max(from, x))\n\nfunction removeHandler(chart: Chart, type: HandlerName) {\n  const { handlers, targets } = getState(chart)\n  const handler = handlers[type]\n  const target = targets[type]\n  if (handler && target) {\n    target.removeEventListener(type, handler)\n    delete handlers[type]\n  }\n}\n\ntype EventHandler<T extends Event> = (chart: Chart, event: T, options: ZoomPluginOptions) => void\n\nfunction addHandler<T extends Event>(\n  chart: Chart,\n  target: HTMLCanvasElement | Document,\n  type: HandlerName,\n  handler: EventHandler<T>\n) {\n  const { handlers, options, targets } = getState(chart)\n  const oldHandler = handlers[type]\n  if (oldHandler && targets[type] === target) {\n    // already attached\n    return\n  }\n  removeHandler(chart, type)\n  const listener = (handlers[type] = (event) => handler(chart, event as T, options))\n  targets[type] = target\n\n  // `passive: false` for wheel events, to prevent chrome warnings. Use default value for other events.\n  const passive = type === 'wheel' ? false : undefined\n  target.addEventListener(type, listener, { passive })\n}\n\nexport function mouseMove(chart: Chart, event: MouseEvent) {\n  const state = getState(chart)\n  if (state.dragStart) {\n    state.dragging = true\n    state.dragEnd = event\n    // chart.update('none')\n  }\n}\n\nfunction keyDown(chart: Chart, event: KeyboardEvent) {\n  const state = getState(chart)\n  if (!state.dragStart || event.key !== 'Escape') {\n    return\n  }\n\n  removeHandler(chart, 'keydown')\n  state.dragging = false\n  state.dragStart = state.dragEnd = undefined\n  chart.update('none')\n}\n\nfunction getPointPosition(event: MouseEvent, chart: Chart) {\n  if (event.target !== chart.canvas) {\n    const canvasArea = chart.canvas.getBoundingClientRect()\n    return {\n      x: event.clientX - canvasArea.left,\n      y: event.clientY - canvasArea.top,\n    }\n  }\n  return getRelativePosition(event, chart as any) // TODO: would expect Chart type to be valid for getRelativePosition\n}\n\nfunction zoomStart(chart: Chart, event: MouseEvent, zoomOptions: ZoomOptions): boolean | void {\n  const { onZoomStart, onZoomRejected } = zoomOptions\n  if (onZoomStart) {\n    const point = getPointPosition(event, chart)\n    if (onZoomStart?.({ chart, event, point }) === false) {\n      onZoomRejected?.({ chart, event })\n      return false\n    }\n  }\n}\n\nexport function mouseDown(chart: Chart, event: MouseEvent): void {\n  if (chart.legend) {\n    const point = getRelativePosition(event, chart as any) // TODO: would expect Chart type to be valid for getRelativePosition\n    if (_isPointInArea(point, chart.legend)) {\n      return\n    }\n  }\n  const state = getState(chart)\n  const { pan: panOptions, zoom: zoomOptions = {} } = state.options\n  if (\n    event.button !== 0 ||\n    keyPressed(getModifierKey(panOptions), event) ||\n    keyNotPressed(getModifierKey(zoomOptions.drag), event)\n  ) {\n    return zoomOptions.onZoomRejected?.({ chart, event })\n  }\n\n  if (zoomStart(chart, event, zoomOptions) === false) {\n    return\n  }\n  state.dragStart = event\n\n  addHandler(chart, chart.canvas.ownerDocument, 'mousemove', mouseMove)\n  addHandler(chart, window.document, 'keydown', keyDown)\n}\n\nfunction applyAspectRatio(\n  { begin, end }: { begin: { x: number; y: number }; end: { x: number; y: number } },\n  aspectRatio: number\n) {\n  let width = end.x - begin.x\n  let height = end.y - begin.y\n  const ratio = Math.abs(width / height)\n\n  if (ratio > aspectRatio) {\n    width = Math.sign(width) * Math.abs(height * aspectRatio)\n  } else if (ratio < aspectRatio) {\n    height = Math.sign(height) * Math.abs(width / aspectRatio)\n  }\n\n  end.x = begin.x + width\n  end.y = begin.y + height\n}\n\ntype Rect = { top?: number; left?: number; right?: number; bottom?: number }\nfunction applyMinMaxProps(\n  rect: Rect,\n  chartArea: ChartArea,\n  points: { begin: Point; end: Point },\n  { min, max, prop }: { min: keyof Rect; max: keyof Rect; prop: 'x' | 'y' }\n) {\n  rect[min] = clamp(Math.min(points.begin[prop], points.end[prop]), chartArea[min], chartArea[max])\n  rect[max] = clamp(Math.max(points.begin[prop], points.end[prop]), chartArea[min], chartArea[max])\n}\n\nfunction getRelativePoints(\n  chart: Chart,\n  pointEvents: { dragStart: MouseEvent; dragEnd: MouseEvent },\n  maintainAspectRatio?: boolean\n) {\n  const points = {\n    begin: getPointPosition(pointEvents.dragStart, chart),\n    end: getPointPosition(pointEvents.dragEnd, chart),\n  }\n\n  if (maintainAspectRatio) {\n    const aspectRatio = chart.chartArea.width / chart.chartArea.height\n    applyAspectRatio(points, aspectRatio)\n  }\n\n  return points\n}\n\nexport function computeDragRect(\n  chart: Chart,\n  mode: ModeOption | undefined,\n  pointEvents: { dragStart: MouseEvent; dragEnd: MouseEvent },\n  maintainAspectRatio: boolean | undefined\n) {\n  const xEnabled = directionEnabled(mode, 'x', chart)\n  const yEnabled = directionEnabled(mode, 'y', chart)\n  const { top, left, right, bottom, width: chartWidth, height: chartHeight } = chart.chartArea\n  const rect = { top, left, right, bottom }\n\n  const points = getRelativePoints(chart, pointEvents, maintainAspectRatio && xEnabled && yEnabled)\n\n  if (xEnabled) {\n    applyMinMaxProps(rect, chart.chartArea, points, { min: 'left', max: 'right', prop: 'x' })\n  }\n\n  if (yEnabled) {\n    applyMinMaxProps(rect, chart.chartArea, points, { min: 'top', max: 'bottom', prop: 'y' })\n  }\n\n  const width = rect.right - rect.left\n  const height = rect.bottom - rect.top\n\n  return {\n    ...rect,\n    width,\n    height,\n    zoomX: xEnabled && width ? 1 + (chartWidth - width) / chartWidth : 1,\n    zoomY: yEnabled && height ? 1 + (chartHeight - height) / chartHeight : 1,\n  }\n}\n\nexport function mouseUp(chart: Chart, event: MouseEvent) {\n  const state = getState(chart)\n  if (!state.dragStart) {\n    return\n  }\n\n  removeHandler(chart, 'mousemove')\n  const { mode, onZoomComplete, drag } = state.options.zoom ?? {}\n  const { threshold = 0, maintainAspectRatio } = drag ?? {}\n  const rect = computeDragRect(chart, mode, { dragStart: state.dragStart, dragEnd: event }, maintainAspectRatio)\n  const distanceX = directionEnabled(mode, 'x', chart) ? rect.width : 0\n  const distanceY = directionEnabled(mode, 'y', chart) ? rect.height : 0\n  const distance = Math.sqrt(distanceX * distanceX + distanceY * distanceY)\n\n  // Remove drag start and end before chart update to stop drawing selected area\n  state.dragStart = state.dragEnd = undefined\n\n  if (distance <= threshold) {\n    state.dragging = false\n    chart.update('none')\n    return\n  }\n\n  zoomRect(chart, { x: rect.left, y: rect.top }, { x: rect.right, y: rect.bottom }, 'zoom', 'drag')\n\n  state.dragging = false\n  state.filterNextClick = true\n  onZoomComplete?.({ chart })\n}\n\nfunction wheelPreconditions(chart: Chart, event: WheelEvent, zoomOptions: ZoomOptions): true | void {\n  // Before preventDefault, check if the modifier key required and pressed\n  if (keyNotPressed(getModifierKey(zoomOptions.wheel), event)) {\n    zoomOptions.onZoomRejected?.({ chart, event })\n    return\n  }\n\n  if (zoomStart(chart, event, zoomOptions) === false) {\n    return\n  }\n\n  // Prevent the event from triggering the default behavior (e.g. content scrolling).\n  if (event.cancelable) {\n    event.preventDefault()\n  }\n\n  // Firefox always fires the wheel event twice:\n  // First without the delta and right after that once with the delta properties.\n  if (event.deltaY === undefined) {\n    return\n  }\n  return true\n}\n\nexport function wheel(chart: Chart, event: WheelEvent & { target?: HTMLCanvasElement }) {\n  const {\n    handlers: { onZoomComplete },\n    options: { zoom: zoomOptions = {} },\n  } = getState(chart)\n\n  if (!wheelPreconditions(chart, event, zoomOptions)) {\n    return\n  }\n\n  const rect = event.target?.getBoundingClientRect()\n  const speed = zoomOptions?.wheel?.speed ?? 0.1\n  const percentage = event.deltaY >= 0 ? 2 - 1 / (1 - speed) : 1 + speed\n  const amount = {\n    x: percentage,\n    y: percentage,\n    focalPoint: {\n      x: event.clientX - rect.left,\n      y: event.clientY - rect.top,\n    },\n  }\n\n  zoom(chart, amount, 'zoom', 'wheel')\n\n  onZoomComplete?.(event)\n}\n\nfunction addDebouncedHandler(\n  chart: Chart,\n  name: HandlerName,\n  handler: HandlerFunctions['onZoomComplete'] | undefined,\n  delay: number\n) {\n  if (handler) {\n    getState(chart).handlers[name] = debounce(() => handler?.({ chart }), delay)\n  }\n}\n\nexport function addListeners(chart: Chart, options: ZoomPluginOptions) {\n  const canvas = chart.canvas\n  const { wheel: wheelOptions, drag: dragOptions, onZoomComplete } = options.zoom ?? {}\n\n  // Install listeners. Do this dynamically based on options so that we can turn zoom on and off\n  // We also want to make sure listeners aren't always on. E.g. if you're scrolling down a page\n  // and the mouse goes over a chart you don't want it intercepted unless the plugin is enabled\n  if (wheelOptions?.enabled) {\n    addHandler(chart, canvas, 'wheel', wheel)\n    addDebouncedHandler(chart, 'onZoomComplete', onZoomComplete, 250)\n  } else {\n    removeHandler(chart, 'wheel')\n  }\n  if (dragOptions?.enabled) {\n    addHandler(chart, canvas, 'mousedown', mouseDown)\n    addHandler(chart, canvas.ownerDocument, 'mouseup', mouseUp)\n  } else {\n    removeHandler(chart, 'mousedown')\n    removeHandler(chart, 'mousemove')\n    removeHandler(chart, 'mouseup')\n    removeHandler(chart, 'keydown')\n  }\n}\n\nexport function removeListeners(chart: Chart) {\n  removeHandler(chart, 'mousedown')\n  removeHandler(chart, 'mousemove')\n  removeHandler(chart, 'mouseup')\n  removeHandler(chart, 'wheel')\n  removeHandler(chart, 'click')\n  removeHandler(chart, 'keydown')\n}\n","import { getRelativePosition } from 'chart.js/helpers'\nimport Hammer from 'hammerjs'\nimport { pan, zoom } from './core'\nimport { getState, type State } from './state'\nimport { directionEnabled, getEnabledScalesByPoint, getModifierKey, keyNotPressed, keyPressed } from './utils'\nimport type { Chart } from 'chart.js'\nimport type { ZoomPluginOptions } from './options'\n\nfunction createEnabler(chart: Chart, state: State) {\n  return function (_recognizer: any, event: HammerInput) {\n    const { pan: panOptions, zoom: zoomOptions = {} } = state.options\n    if (!panOptions || !panOptions.enabled) {\n      return false\n    }\n    const srcEvent = event && event.srcEvent\n    if (!srcEvent) {\n      // Sometimes Hammer queries this with a null event.\n      return true\n    }\n    if (\n      !state.panning &&\n      event.pointerType === 'mouse' &&\n      (keyNotPressed(getModifierKey(panOptions), srcEvent) || keyPressed(getModifierKey(zoomOptions.drag), srcEvent))\n    ) {\n      panOptions.onPanRejected?.({ chart, event })\n      return false\n    }\n    return true\n  }\n}\n\nfunction pinchAxes(p0: { clientX: number; clientY: number }, p1: { clientX: number; clientY: number }) {\n  // fingers position difference\n  const pinchX = Math.abs(p0.clientX - p1.clientX)\n  const pinchY = Math.abs(p0.clientY - p1.clientY)\n\n  // diagonal fingers will change both (xy) axes\n  const p = pinchX / pinchY\n  let x, y\n  if (p > 0.3 && p < 1.7) {\n    x = y = true\n  } else if (pinchX > pinchY) {\n    x = true\n  } else {\n    y = true\n  }\n  return { x, y }\n}\n\nfunction handlePinch(chart: Chart, state: State, e: HammerInput) {\n  if (state.scale) {\n    const { center, pointers } = e\n    // Hammer reports the total scaling. We need the incremental amount\n    const zoomPercent = (1 / state.scale) * e.scale\n    const rect = e.target.getBoundingClientRect()\n    const pinch = pinchAxes(pointers[0], pointers[1])\n    const mode = state.options.zoom?.mode\n    const amount = {\n      x: pinch.x && directionEnabled(mode, 'x', chart) ? zoomPercent : 1,\n      y: pinch.y && directionEnabled(mode, 'y', chart) ? zoomPercent : 1,\n      focalPoint: {\n        x: center.x - rect.left,\n        y: center.y - rect.top,\n      },\n    }\n\n    zoom(chart, amount, 'zoom', 'pinch')\n\n    // Keep track of overall scale\n    state.scale = e.scale\n  }\n}\n\nfunction startPinch(chart: Chart, state: State, e: HammerInput) {\n  if (state.options.zoom?.pinch?.enabled) {\n    const point = getRelativePosition(e.srcEvent, chart as any) // TODO: would expect Chart type to be valid for getRelativePosition\n    if (state.options.zoom?.onZoomStart?.({ chart, event: e.srcEvent, point }) === false) {\n      state.scale = null\n      state.options.zoom?.onZoomRejected?.({ chart, event: e.srcEvent })\n    } else {\n      state.scale = 1\n    }\n  }\n}\n\nfunction endPinch(chart: Chart, state: State, e: HammerInput) {\n  if (state.scale) {\n    handlePinch(chart, state, e)\n    state.scale = null // reset\n    state.options.zoom?.onZoomComplete?.({ chart })\n  }\n}\n\nfunction handlePan(chart: Chart, state: State, e: HammerInput) {\n  const delta = state.delta\n  if (delta) {\n    state.panning = true\n    pan(chart, { x: e.deltaX - delta.x, y: e.deltaY - delta.y }, state.panScales)\n    state.delta = { x: e.deltaX, y: e.deltaY }\n  }\n}\n\nfunction startPan(chart: Chart, state: State, event: HammerInput) {\n  const { enabled, onPanStart, onPanRejected } = state.options.pan ?? {}\n  if (!enabled) {\n    return\n  }\n  const rect = event.target.getBoundingClientRect()\n  const point = {\n    x: event.center.x - rect.left,\n    y: event.center.y - rect.top,\n  }\n\n  if (onPanStart?.({ chart, event, point }) === false) {\n    return onPanRejected?.({ chart, event })\n  }\n\n  state.panScales = getEnabledScalesByPoint(state.options.pan, point, chart)\n  state.delta = { x: 0, y: 0 }\n  handlePan(chart, state, event)\n}\n\nfunction endPan(chart: Chart, state: State) {\n  state.delta = null\n  if (state.panning) {\n    state.panning = false\n    state.filterNextClick = true\n    state.options.pan?.onPanComplete?.({ chart })\n  }\n}\n\nconst hammers = new WeakMap()\nexport function startHammer(chart: Chart, options: ZoomPluginOptions) {\n  const state = getState(chart)\n  const canvas = chart.canvas\n  const { pan: panOptions, zoom: zoomOptions } = options\n\n  const mc = new Hammer.Manager(canvas)\n  if (zoomOptions?.pinch?.enabled) {\n    mc.add(new Hammer.Pinch())\n    mc.on('pinchstart', (e) => startPinch(chart, state, e))\n    mc.on('pinch', (e) => handlePinch(chart, state, e))\n    mc.on('pinchend', (e) => endPinch(chart, state, e))\n  }\n\n  if (panOptions && panOptions.enabled) {\n    mc.add(\n      new Hammer.Pan({\n        threshold: panOptions.threshold,\n        enable: createEnabler(chart, state),\n      })\n    )\n    mc.on('panstart', (e) => startPan(chart, state, e))\n    mc.on('panmove', (e) => handlePan(chart, state, e))\n    mc.on('panend', () => endPan(chart, state))\n  }\n\n  hammers.set(chart, mc)\n}\n\nexport function stopHammer(chart: Chart) {\n  const mc = hammers.get(chart)\n  if (mc) {\n    mc.remove('pinchstart')\n    mc.remove('pinch')\n    mc.remove('pinchend')\n    mc.remove('panstart')\n    mc.remove('pan')\n    mc.remove('panend')\n    mc.destroy()\n    hammers.delete(chart)\n  }\n}\n\nexport function hammerOptionsChanged(oldOptions: ZoomPluginOptions, newOptions: ZoomPluginOptions) {\n  const { pan: oldPan, zoom: oldZoom } = oldOptions\n  const { pan: newPan, zoom: newZoom } = newOptions\n\n  if (oldZoom?.pinch?.enabled !== newZoom?.pinch?.enabled) {\n    return true\n  }\n  if (oldPan?.enabled !== newPan?.enabled) {\n    return true\n  }\n  if (oldPan?.threshold !== newPan?.threshold) {\n    return true\n  }\n\n  return false\n}\n","import type { ZoomPluginOptions } from './options'\n\nexport const defaults: ZoomPluginOptions = {\n  pan: {\n    enabled: false,\n    mode: 'xy',\n    threshold: 10,\n    modifierKey: null,\n  },\n  zoom: {\n    wheel: {\n      enabled: false,\n      speed: 0.1,\n      modifierKey: null,\n    },\n    drag: {\n      enabled: false,\n      drawTime: 'beforeDatasetsDraw',\n      modifierKey: null,\n    },\n    pinch: {\n      enabled: false,\n    },\n    mode: 'xy',\n  },\n}\n","import Hammer from 'hammerjs'\nimport { addListeners, computeDragRect, removeListeners } from './handlers'\nimport { hammerOptionsChanged, startHammer, stopHammer } from './hammer'\nimport {\n  pan,\n  zoom,\n  resetZoom,\n  zoomScale,\n  getZoomLevel,\n  getInitialScaleBounds,\n  getZoomedScaleBounds,\n  isZoomedOrPanned,\n  isZoomingOrPanning,\n  isZoomingOrPanningState,\n  zoomRect,\n} from './core'\nimport { panFunctions, zoomFunctions, zoomRectFunctions } from './scale.types'\nimport { getState, removeState } from './state'\nimport { version } from '../package.json'\nimport type { Chart, ChartEvent } from 'chart.js'\nimport type { ZoomPluginOptions } from './options'\nimport { defaults } from './defaults'\n\nfunction draw(chart: Chart, caller: string, options: ZoomPluginOptions) {\n  const dragOptions = options.zoom?.drag\n  const { dragStart, dragEnd } = getState(chart)\n\n  if (dragOptions?.drawTime !== caller || !dragStart || !dragEnd) {\n    return\n  }\n  const { left, top, width, height } = computeDragRect(\n    chart,\n    options.zoom?.mode,\n    { dragStart, dragEnd },\n    dragOptions.maintainAspectRatio\n  )\n  const ctx = chart.ctx\n\n  ctx.save()\n  ctx.beginPath()\n  ctx.fillStyle = dragOptions.backgroundColor || 'rgba(225,225,225,0.3)'\n  ctx.fillRect(left, top, width, height)\n\n  if (dragOptions.borderWidth) {\n    ctx.lineWidth = dragOptions.borderWidth\n    ctx.strokeStyle = dragOptions.borderColor || 'rgba(225,225,225)'\n    ctx.strokeRect(left, top, width, height)\n  }\n  ctx.restore()\n}\n\nconst bindApi = (chart: Chart) => {\n  chart.pan = (delta, panScales, transition) => pan(chart, delta, panScales, transition)\n  chart.zoom = (args, transition) => zoom(chart, args, transition)\n  chart.zoomRect = (p0, p1, transition) => zoomRect(chart, p0, p1, transition)\n  chart.zoomScale = (id, range, transition) => zoomScale(chart, id, range, transition)\n  chart.resetZoom = (transition) => resetZoom(chart, transition)\n  chart.getZoomLevel = () => getZoomLevel(chart)\n  chart.getInitialScaleBounds = () => getInitialScaleBounds(chart)\n  chart.getZoomedScaleBounds = () => getZoomedScaleBounds(chart)\n  chart.isZoomedOrPanned = () => isZoomedOrPanned(chart)\n  chart.isZoomingOrPanning = () => isZoomingOrPanning(chart)\n}\n\nexport default {\n  id: 'zoom',\n\n  version,\n\n  defaults,\n\n  start(chart: Chart, _args: unknown, options: ZoomPluginOptions) {\n    const state = getState(chart)\n    state.options = options\n\n    if (Object.prototype.hasOwnProperty.call(options.zoom, 'enabled')) {\n      console.warn(\n        'The option `zoom.enabled` is no longer supported. Please use `zoom.wheel.enabled`, `zoom.drag.enabled`, or `zoom.pinch.enabled`.'\n      )\n    }\n    if (\n      Object.prototype.hasOwnProperty.call(options.zoom, 'overScaleMode') ||\n      Object.prototype.hasOwnProperty.call(options.pan, 'overScaleMode')\n    ) {\n      console.warn(\n        'The option `overScaleMode` is deprecated. Please use `scaleMode` instead (and update `mode` as desired).'\n      )\n    }\n\n    if (Hammer) {\n      startHammer(chart, options)\n    }\n\n    bindApi(chart)\n  },\n\n  beforeEvent(\n    chart: Chart,\n    { event }: { event: ChartEvent; replay: boolean; cancelable: true; inChartArea: boolean }\n  ): boolean | void {\n    const state = getState(chart)\n    if (isZoomingOrPanningState(state)) {\n      return\n    }\n    // cancel the next click or mouseup after drag or pan\n    if (event.type === 'click' || event.type === 'mouseup') {\n      if (state.filterNextClick) {\n        state.filterNextClick = false\n        return false\n      }\n    }\n  },\n\n  beforeUpdate(chart: Chart, _args: unknown, options: ZoomPluginOptions) {\n    const state = getState(chart)\n    const previousOptions = state.options\n    state.options = options\n\n    // Hammer needs to be restarted when certain options change.\n    if (hammerOptionsChanged(previousOptions, options)) {\n      stopHammer(chart)\n      startHammer(chart, options)\n    }\n\n    addListeners(chart, options)\n  },\n\n  beforeDatasetsDraw(chart: Chart, _args: unknown, options: ZoomPluginOptions) {\n    draw(chart, 'beforeDatasetsDraw', options)\n  },\n\n  afterDatasetsDraw(chart: Chart, _args: unknown, options: ZoomPluginOptions) {\n    draw(chart, 'afterDatasetsDraw', options)\n  },\n\n  beforeDraw(chart: Chart, _args: unknown, options: ZoomPluginOptions) {\n    draw(chart, 'beforeDraw', options)\n  },\n\n  afterDraw(chart: Chart, _args: unknown, options: ZoomPluginOptions) {\n    draw(chart, 'afterDraw', options)\n  },\n\n  stop(chart: Chart) {\n    removeListeners(chart)\n\n    if (Hammer) {\n      stopHammer(chart)\n    }\n    removeState(chart)\n  },\n\n  panFunctions,\n  zoomFunctions,\n  zoomRectFunctions,\n}\n"],"names":["eventKey","key","getModifierKey","opts","enabled","modifierKey","undefined","keyPressed","event","keyNotPressed","directionEnabled","mode","dir","chart","indexOf","directionsEnabled","x","y","debounce","fn","delay","timeout","clearTimeout","setTimeout","getScaleUnderPoint","scales","scaleIds","Object","keys","i","length","scale","top","bottom","left","right","convertOverScaleMode","overScaleMode","scaleEnabled","overScaleEnabled","axis","getEnabledScales","enabledScales","scaleItem","values","push","getEnabledScalesByPoint","options","point","scaleMode","chartStates","WeakMap","getState","state","get","originalScaleLimits","updatedScaleLimits","handlers","targets","panDelta","dragging","panning","set","removeState","delete","isTimeScale","type","isNotNumber","value","isNaN","zoomDelta","val","min","range","newRange","minPercent","isNumber","Math","max","maxPercent","getValueAtPoint","pixel","isHorizontal","getValueForPixel","linearZoomDelta","zoom","center","centerValue","logarithmicZoomRange","logMin","log10","logMax","logCenter","logRange","newLogRange","delta","pow","getScaleLimits","limits","id","getLimit","scaleLimits","prop","fallback","limit","original","isNullOrUndef","parsed","parse","valueOrDefault","linearRange","pixel0","pixel1","v0","v1","fixRange","minLimit","maxLimit","offset","origLimits","origMin","Infinity","origMax","epsilon","almostEquals","updateRange","scaleOpts","minRange","scaleRange","zoomNumericalScale","zoomLogarithmicScale","zoomRectNumericalScale","from","to","integerChange","v","round","existCategoryFromMaxZoom","labels","getLabels","maxIndex","zoomCategoryScale","scaleLength","width","height","panCategoryScale","lastLabelIndex","stepDelta","stepSize","abs","applied","Boolean","OFFSETS","millisecond","second","minute","hour","day","week","month","quarter","year","panNumericalScale","pan","prevStart","prevEnd","time","newMin","getPixelForValue","newMax","panNonLinearScale","zoomFunctions","category","default","logarithmic","zoomRectFunctions","panFunctions","timeseries","shouldUpdateScaleLimits","previous","removeMissingScales","storeOriginalScaleLimits","doZoom","amount","doZoomRect","getCenter","ca","chartArea","transition","trigger","focalPoint","zoomOptions","xEnabled","yEnabled","update","onZoom","zoomRect","p0","p1","zoomScale","scaleId","resetZoom","scaleOptions","onZoomComplete","getOriginalRange","getZoomLevel","origRange","level","panScale","storedDelta","sign","panOptions","onPan","getInitialScaleBounds","scaleBounds","getZoomedScaleBounds","isZoomedOrPanned","originalMin","originalMax","isZoomingOrPanningState","isZoomingOrPanning","filterNextClick","clamp","removeHandler","handler","target","removeEventListener","addHandler","oldHandler","listener","passive","addEventListener","mouseMove","dragStart","dragEnd","keyDown","getPointPosition","canvas","canvasArea","getBoundingClientRect","clientX","clientY","getRelativePosition","zoomStart","onZoomStart","onZoomRejected","mouseDown","legend","_isPointInArea","button","drag","ownerDocument","window","document","applyAspectRatio","begin","end","aspectRatio","ratio","applyMinMaxProps","rect","points","getRelativePoints","pointEvents","maintainAspectRatio","computeDragRect","chartWidth","chartHeight","zoomX","zoomY","mouseUp","threshold","distanceX","distanceY","distance","sqrt","wheelPreconditions","wheel","cancelable","preventDefault","deltaY","speed","percentage","addDebouncedHandler","name","addListeners","wheelOptions","dragOptions","removeListeners","createEnabler","_recognizer","srcEvent","pointerType","onPanRejected","pinchAxes","pinchX","pinchY","p","handlePinch","e","pointers","zoomPercent","pinch","startPinch","endPinch","handlePan","deltaX","panScales","startPan","onPanStart","endPan","onPanComplete","hammers","startHammer","mc","Hammer","Manager","add","Pinch","on","Pan","enable","stopHammer","remove","destroy","hammerOptionsChanged","oldOptions","newOptions","oldPan","oldZoom","newPan","newZoom","defaults","drawTime","draw","caller","ctx","save","beginPath","fillStyle","backgroundColor","fillRect","borderWidth","lineWidth","strokeStyle","borderColor","strokeRect","restore","bindApi","args","version","start","_args","prototype","hasOwnProperty","call","console","warn","beforeEvent","beforeUpdate","previousOptions","beforeDatasetsDraw","afterDatasetsDraw","beforeDraw","afterDraw","stop"],"mappings":"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"}